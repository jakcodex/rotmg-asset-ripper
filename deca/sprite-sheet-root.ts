// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AnimatedSprite } from '../deca/animated-sprite.js';
import { SpriteSheet } from '../deca/sprite-sheet.js';


export class SpriteSheetRoot {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SpriteSheetRoot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSpriteSheetRoot(bb:flatbuffers.ByteBuffer, obj?:SpriteSheetRoot):SpriteSheetRoot {
  return (obj || new SpriteSheetRoot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSpriteSheetRoot(bb:flatbuffers.ByteBuffer, obj?:SpriteSheetRoot):SpriteSheetRoot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SpriteSheetRoot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sprites(index: number, obj?:SpriteSheet):SpriteSheet|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SpriteSheet()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

spritesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

animatedSprites(index: number, obj?:AnimatedSprite):AnimatedSprite|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new AnimatedSprite()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

animatedSpritesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSpriteSheetRoot(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSprites(builder:flatbuffers.Builder, spritesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, spritesOffset, 0);
}

static createSpritesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSpritesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAnimatedSprites(builder:flatbuffers.Builder, animatedSpritesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, animatedSpritesOffset, 0);
}

static createAnimatedSpritesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAnimatedSpritesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSpriteSheetRoot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSpriteSheetRootBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedSpriteSheetRootBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createSpriteSheetRoot(builder:flatbuffers.Builder, spritesOffset:flatbuffers.Offset, animatedSpritesOffset:flatbuffers.Offset):flatbuffers.Offset {
  SpriteSheetRoot.startSpriteSheetRoot(builder);
  SpriteSheetRoot.addSprites(builder, spritesOffset);
  SpriteSheetRoot.addAnimatedSprites(builder, animatedSpritesOffset);
  return SpriteSheetRoot.endSpriteSheetRoot(builder);
}
}
