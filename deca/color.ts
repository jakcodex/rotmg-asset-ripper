// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Color {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Color {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

r():number {
  return this.bb!.readFloat32(this.bb_pos);
}

g():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
}

b():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
}

a():number {
  return this.bb!.readFloat32(this.bb_pos + 12);
}

static sizeOf():number {
  return 16;
}

static createColor(builder:flatbuffers.Builder, R: number, G: number, B: number, A: number):flatbuffers.Offset {
  builder.prep(4, 16);
  builder.writeFloat32(A);
  builder.writeFloat32(B);
  builder.writeFloat32(G);
  builder.writeFloat32(R);
  return builder.offset();
}

}
