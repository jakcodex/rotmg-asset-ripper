// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Color } from '../deca/color.js';
import { Position } from '../deca/position.js';


export class Sprite {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Sprite {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSprite(bb:flatbuffers.ByteBuffer, obj?:Sprite):Sprite {
  return (obj || new Sprite()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSprite(bb:flatbuffers.ByteBuffer, obj?:Sprite):Sprite {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Sprite()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

position(obj?:Position):Position|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Position()).__init(this.bb_pos + offset, this.bb!) : null;
}

maskPosition(obj?:Position):Position|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Position()).__init(this.bb_pos + offset, this.bb!) : null;
}

padding():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

index():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

mostCommonColor(obj?:Color):Color|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Color()).__init(this.bb_pos + offset, this.bb!) : null;
}

isT():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

spriteSheetName():string|null
spriteSheetName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
spriteSheetName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

aId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startSprite(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, positionOffset, 0);
}

static addMaskPosition(builder:flatbuffers.Builder, maskPositionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, maskPositionOffset, 0);
}

static addPadding(builder:flatbuffers.Builder, padding:number) {
  builder.addFieldInt32(2, padding, 0);
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt32(3, index, 0);
}

static addMostCommonColor(builder:flatbuffers.Builder, mostCommonColorOffset:flatbuffers.Offset) {
  builder.addFieldStruct(4, mostCommonColorOffset, 0);
}

static addIsT(builder:flatbuffers.Builder, isT:boolean) {
  builder.addFieldInt8(5, +isT, +false);
}

static addSpriteSheetName(builder:flatbuffers.Builder, spriteSheetNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, spriteSheetNameOffset, 0);
}

static addAId(builder:flatbuffers.Builder, aId:bigint) {
  builder.addFieldInt64(7, aId, BigInt('0'));
}

static endSprite(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
